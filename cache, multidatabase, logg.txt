Working with multiple databases
----------------------------------
add the below settings in databases section settings.py 
'backup': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db2'),
    }
if you want to migrate all your migrations to db2 use the below command.
python manage.py migrate --database backup.

If you want to save a record in to db2 then follow the below steps.
m.save() # this will save the record data into default database table.
m.save(using='backup') # this will save  data into db2 database table.

if you want to get the data:
Model.objects.using('backup').all()

if you want to delete data from db2 database.
m = Model.objects.using('backup').get(id=17)
m.delete(using="backup") 

working with cache systems
-----------------------------
Add the below lines in settings.py
CACHES = {
   'default': {
      'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
      'LOCATION': 'my_table_name',
   }
}
 run the below command to create a table in database.
 python manage.py createcachetable

To cache entire site. add the below lines in settings.py
MIDDLEWARE_CLASSES += (
   'django.middleware.cache.UpdateCacheMiddleware',
   'django.middleware.common.CommonMiddleware',
   'django.middleware.cache.FetchFromCacheMiddleware',
)


for perticular view:
from django.views.decorators.cache import cache_page

@cache_page(60 * 15)

def viewArticles(request, year, month):
   text = "Displaying articles of : %s/%s"%(year, month)
   return HttpResponse(text)

write your own cache code in your views:
from django.core.cache import cache
cache.set("Movie:"+str(pk), data)
data = cache.get("Movie:"+str(pk))
cache.delete("Movie:"+str(pk))

LOGGING
-------------------------
In settings:
LOGGING ={
            'version': 1,
            'disable_existing_loggers':False,
            'formatters':{
                'simple':{
                    'format':"%(asctime)s->%(levelname)s->%(message)s->%(name)s"
                },


            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                    #'class': 'logging.FileHandler',
                    #'filename':'log.txt',
                    'formatter': "simple",
                    },
                'file': {
                    'class': 'logging.FileHandler',
                    'filename':'log.txt',
                    'formatter': "simple",
                    },
                },
            'loggers': {
                'bookticket': {
                'handlers': ['file'],

                'level': "DEBUG"},
                },
}
import logging
logger = logging.getLogger(__name__)
logger.info("started movie creation")


Deployment steps
-----------------------------
check settings.py allowed_host=["*"]
DEBUG=FALSE
install dependencies:
	requirements.txt: this should contains the modules with version
	pip freeze>requirements.txt
	to install dependencies: pip install -r requirements.txt
	python manage.py makemigrations
	python manage.py migrate
	python manage.py runserver
	execute above four command using setup.py
form the setup.py

remover python manage.py runserver from setup.py, because we are going to run our appp
to install gunicorn: pip install gunicorn
with gunicorn with multiple workers
 before goiong to add in setup.py lets test manually!!
 run the below command in your project directory.
 gunicorn --bind 0.0.0.0:9000 bookyourticket.wsgi --workers=10

gunicorn is running.
lets access this with nginx.
install nginx: sudo apt-get install nginx
check service is running or not: service nginx status
we need to configure nginx to acess the above gunicorn server.
access nginx only from browser: http://localhost
it should show welcome nginx in the browser

vi /etc/nginx/sites-available/default
remove total data and add the below content
server{
    listen 80;
    server_name localhost;
    location /{
        return 301 "http://localhost:9000/bookticket";
}

}

sudo systemctl reload nginx
sudo systemctl restart nginx
sudo systemctl status nginx


django rest framework
---------------------------
pip install djangorestframework
start a new aplication
python manage.py startapp api
Use from rest_framework.views import APIView.
Add the below settings for authentication.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        #'rest_framework.authentication.TokenAuthentication',
    ),
    "DEFAULT_PERMISSION_CLASSES":(
        #"rest_framework.permissions.IsAuthenticatedOrReadOnly",
        "rest_framework.permissions.IsAuthenticated",
        )
}

Token based Authentication
-------------------------
Change the settings file like below
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        #'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    "DEFAULT_PERMISSION_CLASSES":(
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
        #"rest_framework.permissions.IsAuthenticated",
        )
}
add "rest_framework.authtoken' in installedapp of settings
python manage.py migrate
Goto http://locahost:8000/admin.

we can see Tokens link to add tokens

To call an API,in postman-->AUtherization-->Tokens-> Add token
If you want to create token from code follow the below code:
In [2]: from rest_framework.authtoken.models import Token

In [3]: from django.contrib.auth import get_user_model

In [4]: user_model = get_user_model()

In [5]: user = user_model.objects.first()
In [11]: t=Token(user=user)

In [12]: t.save()

In [13]: print(t)
a9f32e1a775820dcbab227f42f145e087825f258

While calling an API from postman, mention token in Headers section: key: Authorization, value: Token <token>

deployment with docker
----------------------------------
pull ubuntu os with python3
update the os: apt-get update
copy local sourcecode to images
install depecdent packages: pip install -r requrements.txt
python manage.py makemigrations
python manage.py migrate
pytohn manage.py runserver