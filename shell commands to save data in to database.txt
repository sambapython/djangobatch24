In [1]: from product.models import *

In [2]: elec = Category(name="electronics")

In [3]: elec.save()

In [5]: mi_mobile = Product(name="Mi note 7", cost=13000, category=elec, deliver_charges=120)

In [6]: mi_mobile.save()

In [7]: mi_mobile_9 = Product(name="Mi note 9", cost=15000, category=elec, deliver_charges=120)

In [8]: mi_mobile_9.save()

In [9]: jay = Customer(name="JAYARAM")

In [10]: jay.save()

In [11]: jay_order_1 = Sales(description="buying note7 and 9",  customer=jay)

In [13]: jay_order_1.save()

In [14]: jay_order_1
Out[14]: <Sales: Sales object (1)>

In [15]: jay_order_1.products.all()
Out[15]: <QuerySet []>

In [16]: print(dir(jay_order_1.products))
['add', 'aggregate', 'alias', 'all', 'annotate', 'auto_created', 'bulk_create', 'bulk_update', 'check', 'clear', 'complex_filter', 'contribute_to_class', 'core_filters', 'count', 'create', 'creation_counter', 'dates', 'datetimes', 'db', 'db_manager', 'deconstruct', 'defer', 'difference', 'distinct', 'do_not_call_in_templates', 'earliest', 'exclude', 'exists', 'explain', 'extra', 'filter', 'first', 'from_queryset', 'get', 'get_or_create', 'get_prefetch_queryset', 'get_queryset', 'in_bulk', 'instance', 'intersection', 'iterator', 'last', 'latest', 'model', 'name', 'none', 'only', 'order_by', 'pk_field_names', 'prefetch_cache_name', 'prefetch_related', 'query_field_name', 'raw', 'related_val', 'remove', 'reverse', 'select_for_update', 'select_related', 'set', 'source_field', 'source_field_name', 'symmetrical', 'target_field', 'target_field_name', 'through', 'union', 'update', 'update_or_create', 'use_in_migrations', 'using', 'values', 'values_list']

In [17]: mi_mobile
Out[17]: <Product: Product object (1)>

In [18]: mi_mobile_9
Out[18]: <Product: Product object (2)>

In [19]: jay_order_1.products.add(mi_mobile)

In [22]: jay_order_1.products.add(mi_mobile_9, through_defaults={"cost":14000,"quantity":2})

In [23]: sales_product = SalesProducts(product=mi_mobile, sales=jay_order_1, cost=13500, quantity=3)

In [24]: sales_product.save()

In [25]: jay_order_1.products
Out[25]: <django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager at 0x1a380496160>

In [26]: jay_order_1.products.all()
Out[26]: <QuerySet [<Product: Product object (1)>, <Product: Product object (2)>, <Product: Product object (1)>]>

In [27]: jay_order_1.products.remove(mi_mobile)

In [28]: jay_order_1.products.all()
Out[28]: <QuerySet [<Product: Product object (2)>]>

In [29]: jay_order_1.products.clear()

In [31]: jay_order_1.products.create(name="lenovo note 7", category=elec, cost=13000, deliver_charges=145)
Out[31]: <Product: Product object (3)>

In [32]: jay_order_1.products.create(name="lenovo note 7", category=elec, cost=13000, deliver_charges=145, through_defaults={"cost":13500,"quantity":4})
Out[32]: <Product: Product object (4)>